def partioning_list(l):
    mid_val=len(l)//2
    can_partitioned=False
    while mid_val>0 :
        if sum(l[:mid_val])==sum(l[mid_val:]):
            can_partitioned=True
            break
        elif sum(l[:mid_val])>sum(l[mid_val:]):
            mid_val-=mid_val//2
        elif sum(l[:mid_val])<sum(l[mid_val:]):
            mid_val+=mid_val//2
            if l[mid_val:]:
                continue
            else:
                break
    if can_partitioned:
        print("list can be partitioned")
    else:
        print("list can't be partitioned")

l=[1,2,3,6]
m=[1,2,3,4,5,6]
partioning_list(l)
partioning_list(m)

"""Worst case order of complexity will be  O(nlogn).
Since we are partitioning list in middle in each iteration.
"""
